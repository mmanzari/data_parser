# Author: Mohammad Manzari
# Date: 7/3/2017
# Project: JSON Parser (for Spotfire Analysis)

import json
import os


class FileNotFoundError(Exception):
    # exception raised when the datafile isn't located in the current working directory (cwd)
    pass


def get_keys(mydata, superkey="", nested=False):
    # returns a list of all (labeled) keys contained in mydata
    for k in mydata:
        if isinstance(mydata[k], list):
            superkey = k
            nested = True
            for x in mydata[k]:
                get_keys(x, superkey, nested)
            nested = False
        elif isinstance(mydata[k], dict):
            d = mydata[k]
            superkey = k
            nested = True
            get_keys(d, superkey, nested)
            nested = False
        elif nested and (superkey + "_" + k in keyList):
            continue
        elif nested and (superkey + "_" + k not in keyList):
            keyList.append(superkey + "_" + k)
            continue
        elif k not in keyList:
            keyList.append(k)
    return keyList


def get_values(mydata, superkey="", nested=False):
    # returns a dictionary where the keys are taken from the list generated by get_keys()
    # and the associated values are lists containing the data associated with each key
    for k in mydata:
        if isinstance(mydata[k], list):
            superkey = k
            nested = True
            for x in mydata[k]:
                get_values(x, superkey, nested)
            nested = False
        elif isinstance(mydata[k], dict):
            d = mydata[k]
            superkey = k
            nested = True
            get_values(d, superkey, nested)
            nested = False
        elif nested and (superkey + "_" + k in keyList):
            tempkey = (superkey + "_" + k)
            myDict[tempkey].append(mydata[k])
            continue
        elif k in keyList:
            myDict[k].append(mydata[k])
        else:
            print "Something's gone wrong!"
    return myDict


def data2txt(d):
    # returns a string containing the JSON data in a tab-separated format
    # to be read in by Spotfire as a "DataTable"
    text = " \t".join(d.keys())
    empty = False

    while not empty:
        counter = 0
        text += "\r\n"
        for key, val in d.iteritems():
            if len(val) == 0 and counter < len(d) - 1:
                text += " \t"
                counter += 1
            elif counter < len(d) - 1:
                text += str(val.pop(0)) + " \t"
                counter += 1
            elif len(val) == 0 and counter == len(d) - 1:
                text += " \r\n"
            else:
                text += str(val.pop(0))
                counter += 1

        if all(d.values()[0] == item for item in d.values()):
            empty = True

    return text


# Asks for the JSON file to be imported and re-formatted
fName = raw_input("What is your the name of your JSON file?\r\n"
                  "Please do not include the file format extension.\r\n"
                  "Also, ensure that the data file is located in the current working directory.")


fPath = os.getcwd()  # Returns the path of the current working directory
outPath = fPath+"/OUTPUT" # Declares the path of the output directory


# Checks if the file exists (and is a .json file.)
if os.path.isfile(fPath+"/"+fName+".json"):
    print "Your file's path is %s" % fPath
else:
    msg = "ERROR: I couldn't find %s.json in %s" % (fName, fPath)
    raise FileNotFoundError(msg)

# Reads in the JSON file
with open(fName+".json") as data_file:
    data = json.load(data_file)


keyList = []  # a list of all the key names in the JSON file
listOfAllKeys = get_keys(data)
rowLength = len(listOfAllKeys)

# initializes a dictionary to be used as an argument in data2txt()
myDict = {key: list([]) for key in listOfAllKeys}

get_values(data)
myText = data2txt(myDict)

# changes the cwd to the OUTPUT directory
os.chdir(outPath)

with open(fName+".txt", "w") as text_file:
    text_file.write(myText)

print ("A tab-separated format of the data has been saved as %s.txt\r\n"
       "You can find it in the OUTPUT directory" % fName)

